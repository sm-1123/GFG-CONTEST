------------------DATE:01/07/2024---------------------------

P1: AND IS EQUAL TO OR[TC:O(N), SC:O(1)]

from typing import List


class Solution:

    def ANDequalOR(self, n: int, arr: List[int]) -> int:

        ans = 0

        pre = 0

        count = 0

        for i in range(n):

            if arr[i] == arr[pre]:

                count += 1

            else:

                ans += (count * (count + 1)) // 2

                pre = i

                count = 1

        ans += (count * (count + 1)) // 2

        return ans

P2:Min Size of array[TC:O(N), SC:O(1)]

from typing import List

class Solution:
    #Function to find minimum size of majority element
    def MinSize(self, n: int, A: List[int]) -> int:
        #find majority element which may occur more than n/2 (Boyer-Moore Majority Voting Algorithm)
        curr = A[0]

        count = 1

for i in range(1, n):

            if A[i] == curr:

                count += 1

            else:

                count -= 1

                if count == 0:

                    curr = A[i]

                    count = 1

        max_f = A.count(curr)

        if max_f <= (n + 1) // 2:

            return n & 1

        else:

            return 2 * max_f - n

------------------DATE:02/07/2024------------------------------------------

P3:Max Difference Cool Prime[TC:O(N), SC:O(1)]

from typing import List
from math import gcd


class Solution:

    def MaxDiff(self, n: int, A: List[int]) -> int:
        
        mx = [-1] * 1001

        mn = [n + 1] * 1001

        for i in range(n):

            mx[A[i]] = max(mx[A[i]], i)

            mn[A[i]] = min(mn[A[i]], i)

        ans = -1

        for i in range(1, 1001):

            for j in range(i, 1001):

                era = gcd(i, j)

                if era != 1:

                    continue

                if mx[i] != -1 and mx[j] != -1:

                    ans = max(ans, abs(mx[i] - mn[j]))

                    ans = max(ans, abs(mx[j] - mn[i]))

        return ans

